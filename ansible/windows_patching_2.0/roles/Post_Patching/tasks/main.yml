# Post Patching main

- name: Managed Node | Get Post-Patching running services on windows
  ansible.windows.win_shell: |
    get-service | where-object {$_.status -eq "running"} | select-object name -expandproperty name | out-file c:\postprs.txt
  register: postprs

- name: Managed Node | Copy Post-Patching running services text file back to control node
  ansible.builtin.fetch:
    src: 'C:\postprs.txt'
    dest: '{{ log_path }}/services/{{ inventory_hostname }}_postprs.txt'
    flat: true
  become: true
  register: postprs_copy

- name: Control Node | Display status of copy of Post-Patching running services file from windows
  ansible.builtin.debug:
    msg: "Successfully copied the Post Patching running services file from {{ inventory_hostname }}"

- name: Control Node | Update failed servers file
  ansible.builtin.lineinfile:
    path: "{{ log_path }}/patching_status/failed.txt"
    insertafter: EOF
    line: "{{ inventory_hostname }}"
    owner: '{{ ssh_user }}'
    mode: '0644'
    create: true
  when: update_count is undefined or update_count.found_update_count != update_count.installed_update_count
  failed_when: false
  delegate_to: localhost
  become: true

- name: Control Node | Update patched servers file
  ansible.builtin.lineinfile:
    path: "{{ log_path }}/patching_status/patched.txt"
    insertafter: EOF
    line: "{{ inventory_hostname }}"
    owner: '{{ ssh_user }}'
    mode: '0644'
    create: true
  when: update_count.found_update_count == update_count.installed_update_count
  failed_when: false
  delegate_to: localhost
  become: true

- name: Managed Node | Checking last reboot time
  ansible.windows.win_shell: Get-CimInstance -ComputerName localhost -Class CIM_OperatingSystem -ErrorAction Stop | Select-Object CSName, LastBootUpTime
  register: lastbootuptime

- name: Control Node | Printing last boot uptime of managed nodes
  ansible.builtin.debug:
    var: lastbootuptime.stdout_lines[3]

- name: Managed Node | Generate hotfix information of last 24 hrs
  ansible.windows.win_shell: |
    $lastboottime=(Get-WmiObject win32_operatingsystem | select @{LABEL='LastBootUpTime';EXPRESSION={$_.ConverttoDateTime($_.lastbootuptime)}}).lastbootuptime;
    Get-HotFix | Select-Object Pscomputername,description,hotfixid,installedby,installedon,@{LABEL='LastBootUpTime';EXPRESSION={$lastboottime}} | `
    Where-Object {$_.installedon -gt (get-date).Addhours(-24)} | Export-Csv -NoTypeInformation -Force C:\hotfix.csv

- name: Managed Node | Collect hotfix information
  ansible.builtin.fetch:
    src: "{{ hotfix_source }}"
    dest: '{{ log_path }}/reports/{{ inventory_hostname }}_hotfix.csv'
    flat: true
  become: true

- name: Control Node | Generating hotfix final report
  ansible.builtin.shell: "awk 'FNR==1 && NR!=1{next;}{print}' reports/*.csv >> results/final-hotfix.csv"
  args:
    chdir: "{{ log_path }}"
  run_once: true
  become: true
  delegate_to: localhost
  changed_when: false

- name: Control Node | Read final hotfix report's content
  ansible.builtin.command: "cat {{ log_path }}/results/final-hotfix.csv"
  run_once: true
  delegate_to: localhost
  register: finalhotfix
  changed_when: false

- name: Control Node | Print final hotfix report's content
  ansible.builtin.debug:
    var: finalhotfix.stdout_lines
  run_once: true
  changed_when: false

- name: Control Node | Create sorted Pre-Patching and Post-Patching files
  ansible.builtin.shell: |
    sort {{ inventory_hostname }}_preprs.txt > sorted_{{ inventory_hostname }}_preprs.txt
    sort {{ inventory_hostname }}_postprs.txt > sorted_{{ inventory_hostname }}_postprs.txt
  args:
    chdir: "{{ log_path }}/services"
  delegate_to: localhost
  run_once: true
  become: true
  changed_when: false

- name: Control Node | Create services difference after Post Patching
  ansible.builtin.shell: |
    comm -23 sorted_{{ inventory_hostname }}_preprs.txt sorted_{{ inventory_hostname }}_postprs.txt > {{ inventory_hostname }}_srv_diff.txt
    rm -rf sorted_{{ inventory_hostname }}_postprs.txt sorted_{{ inventory_hostname }}_preprs.txt
  args:
    chdir: "{{ log_path }}/services"
  delegate_to: localhost
  become: true
  changed_when: false

- name: Control Node | Read file content of service difference file
  ansible.builtin.set_fact:
    file_content: "{{ lookup('file', log_path ~ '/services/' ~ inventory_hostname ~ '_srv_diff.txt') | regex_replace('\u0000','') | split('\n') }}"
  run_once: true
  delegate_to: localhost

- name: Control Node | Print file content of service difference file
  ansible.builtin.debug:
    var: file_content
  run_once: true
  delegate_to: localhost

- name: Control Node | Remove \r from services names using shell module
  ansible.builtin.shell: |
    set -o pipefail
    echo "{{ item }}" | tr -d '\r'
  args:
    executable: /bin/bash
  register: cleaned_word_result
  loop: "{{ file_content }}"
  delegate_to: localhost
  changed_when: false

- name: Control Node | Get cleaned names of services
  ansible.builtin.set_fact:
    cleaned_words: "{{ cleaned_word_result.results | map(attribute='stdout_lines') | flatten }}"
  delegate_to: localhost

- name: Control Node | Print clean file content of service names
  ansible.builtin.debug:
    var: cleaned_words
  run_once: true
  delegate_to: localhost

- name: Managed Node | Start stopped services on windows post patching
  ansible.windows.win_service:
    name: "{{ item }}"
    state: started
    start_mode: auto
  loop: "{{ cleaned_words }}"
  register: srv_diff_start_status
  ignore_errors: true

- name: Managed Node | Clean-up previous log files from windows client
  ansible.windows.win_file:
    path: "{{ item }}"
    state: absent
  with_items:
    - '{{ logs_source }}'
    - '{{ hotfix_source }}'
    - '{{ preprs }}'

- name: Control Node | Create sorted allhosts and patched files
  ansible.builtin.shell: |
    sort allhosts.txt > sorted_allhosts.txt
    sort patched.txt > sorted_allpatched.txt
  args:
    chdir: "{{ log_path }}/patching_status"
  delegate_to: localhost
  run_once: true
  become: true
  changed_when: false

- name: Control Node | Create failed-unreachable file
  ansible.builtin.shell: |
    comm -23 sorted_allhosts.txt sorted_allpatched.txt > failed_unreachable.txt
    rm -rf sorted_allhosts.txt sorted_allpatched.txt
  args:
    chdir: "{{ log_path }}/patching_status"
  delegate_to: localhost
  run_once: true
  become: true
  changed_when: false

- name: Control Node | Read allhosts file's content
  ansible.builtin.command: cat allhosts.txt
  args:
    chdir: '{{ log_path }}/patching_status'
  delegate_to: localhost
  run_once: true
  register: allhostsfile
  changed_when: false

- name: Control Node | Print allhosts file's content
  ansible.builtin.debug:
    var: allhostsfile.stdout_lines
  run_once: true
  changed_when: false

- name: Control Node | Read patched file's content
  ansible.builtin.command: cat patched.txt
  args:
    chdir: '{{ log_path }}/patching_status'
  delegate_to: localhost
  run_once: true
  register: patchedfile
  changed_when: false

- name: Control Node | Print patched file's content
  ansible.builtin.debug:
    var: patchedfile.stdout_lines
  run_once: true
  changed_when: false

- name: Control Node | Read failed_unreachable file's content
  ansible.builtin.command: cat failed_unreachable.txt
  args:
    chdir: '{{ log_path }}/patching_status'
  delegate_to: localhost
  run_once: true
  register: failed_unreachablefile
  changed_when: false

- name: Control Node | Print failed_unreachable file's content
  ansible.builtin.debug:
    var: failed_unreachablefile.stdout_lines
  run_once: true
  changed_when: false

- name: Control Node | Run Powershell script to create patching report
  ansible.builtin.shell: "{{ playbook_dir }}/Patching_Report.ps1 -location {{ log_path }}"
  args:
    executable: /usr/bin/pwsh
  register: pwsh
  delegate_to: localhost
  run_once: true
  changed_when: false

- name: Control Node | Print status of patching report creation
  ansible.builtin.debug:
    msg: "Successfully created Patching report"
  delegate_to: localhost
  run_once: true

- name: Control Node | Copy Patching Report to nginx web server
  ansible.builtin.shell: |
    current_date=$(date +'%d_%m_%y')
    cp {{ log_path }}/results/Patching_Report_"$current_date".docx /usr/share/nginx/html/patching_reports
  register: copy_prs
  delegate_to: localhost
  run_once: true
  changed_when: false

- name: Control Node | Status of copy of Patching report
  ansible.builtin.debug:
    msg: "Successfully copied patching report to nginx"
  when: not copy_prs.failed
  delegate_to: localhost
  run_once: true

- name: Control Node | Force update of current timestamp of the playbook
  ansible.builtin.setup:
    filter: ansible_date_time
  delegate_to: localhost
  run_once: true

- name: Control Node | Get total runtime of the playbook
  ansible.builtin.set_fact:
    runtime: "{{ ((ansible_date_time.iso8601[:19] | to_datetime('%Y-%m-%dT%H:%M:%S')) - (start_time | to_datetime('%Y-%m-%dT%H:%M:%S'))).seconds }}"
  delegate_to: localhost
  run_once: true

- name: Control Node | Copy total runtime variable to a text file
  ansible.builtin.copy:
    content: "{{ runtime }}"
    dest: "{{ log_path }}/results/time_taken.txt"
    owner: "{{ ssh_user }}"
    mode: "0644"
  run_once: true
  become: true
  delegate_to: localhost

- name: Control Node | Print total runtime of the playbook
  ansible.builtin.debug:
    msg: "Total time taken for the playbook is {{ runtime }} seconds"
  delegate_to: localhost
  run_once: true
