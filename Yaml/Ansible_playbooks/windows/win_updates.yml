---
- hosts: all
  name: Windows Patching playbook
  user: root
  become: yes
  gather_facts: true
  vars:
    current_date: "{{ lookup('pipe', 'date +%Y%m%d-%H%M%S') }}"
    logs_folder: '/home/itoc_ansible_admin/logs'
    datewise: '{{ logs_folder }}/Win_Patching_{{ current_date }}'
    hotfix_source: 'C:\hotfix.csv'
    logs_source: 'C:\windows_updates-{{ inventory_hostname }}.txt'
    logs_destination: '{{ reports }}/{{ inventory_hostname }}_updatelogs.txt'
    patch_report: '{{ inventory_hostname }}'    
  pre_tasks:
    - debug: msg="Begining of patching updates on windows servers"
  roles:
    - ansible-role-win_pending_reboot
    - Pre_Patching
    - Patching
    - Post_Patching
  post_tasks:
    - debug: msg="Patch update completed successfully"

    # PrePatching main
    
  - name: Control Node | Create datewise log folder for the playbook
    local_action:
      module: file
      path: '{{ datewise }}'
      force: yes
      state: directory
      mode: 0755
      owner: itoc_ansible_admin
    run_once: yes
    register: datewise
    become: yes
    
  - name: Control Node | Set path variable for the log folder 
    set_fact:
      log_path: '{{ datewise.path }}'
    run_once: yes
     
  - name: Control Node | Create internal logs folder inside datewise
    local_action:
      module: file
      path: '{{ item }}'
      force: yes
      state: directory
      mode: 0755
      owner: itoc_ansible_admin
    with_items:
      - '{{ log_path }}/reports'
      - '{{ log_path }}/results'
      - '{{ log_path }}/patching_status'
    run_once: yes
    become: yes

  - name: Control Node | create temp all hosts file in ansible controller
    template:
      src: all_play_hosts.j2
      dest: '{{ log_path }}/patching_status/allhosts_temp.txt'
    delegate_to: localhost
    vars:
      my_variable: '{{ ansible_play_hosts_all }}'
    become: yes
    become_user: root
    
  - name: Control Node | create all hosts file in ansible controller
    shell: cat allhosts_temp.txt | sed "s/\[u'//g; s/', u'/\n/g; s/'\]//g" >> allhosts.txt;
           rm -rf allhosts_temp.txt
    args:
      chdir: "{{ log_path }}/patching_status"
    delegate_to: localhost
    run_once: yes
    become: yes
    
  - name: Managed Node | Clean-up previous log files
    win_file:
      path: "{{ item }}"
      state: absent
    with_items:
      - '{{ logs_source }}'
      - '{{ hotfix_source }}'
      
  - name: Managed Node | copy template to destination windows servers
    template:
      src: patch-report-template.j2
      dest: "{{ logs_source }}"
  
  - name: Managed Node | Configure the windows update and ssh service
    win_service:
      name: "{{ item }}"
      state: started
      start_mode: auto
    with_items:
      - wuauserv
      - ssh-agent
    ignore_errors: yes
    
  - name: Managed Node | Getting pending reboot status
    win_pending_reboot:
    register: pending_reboot

  - name: Control Node | Print Pending_reboot variable
    debug:
      var: pending_reboot

  - name: Control Node | Print reboot status of windows machines
    debug:
      msg: Initial Reboot is required on the server {{ inventory_hostname }}
    when: pending_reboot.reboot_required == true

  - name: Managed Node | Reboot server if required
    win_shell: restart-computer -force``
    when: pending_reboot.reboot_required == true

  - name: Managed Node | Wait for connection
    wait_for_connection:
      delay: 5
      timeout: 600
  
    # Patching main
  
  - name: Managed Node | Install all available patches with 3 retries
    win_updates:
      category_names:
        - Security Updates
        - Critical Updates
        - Updates
        - Windows Server 2016
        - Windows Server 2019
        - Windows Server 2012 R2
      reboot: yes
      reboot_timeout: 900
      log_path: "{{ logs_source }}"
    register: update_count
    retries: 3
    delay: 300
    until: update_count.failed == false
  
  - name: Managed and Control Node | Collect patch report back to ansible server
    fetch:
     src: "{{ logs_source }}"
     dest: "{{ log_path }}/reports/patch-report-{{ inventory_hostname }}.txt"
     flat: yes
    become: yes

  - name: Control Node | Generating final Patch report
    run_once: yes
    delegate_to: localhost
    shell: "cat {{ log_path }}/reports/patch-report-*.txt >> {{ log_path }}/results/final-patch-report.txt"
    become: yes
  
  - name: Control Node | Read Final Patch report's content
    shell: cat final-patch-report.txt
    args:
      chdir: '{{ log_path }}/results'
    delegate_to: localhost
    run_once: yes
    register: patchreport
  
  - name: Control Node | Print patch report's content
    debug:
      var: patchreport.stdout_lines
    run_once: yes
    
  - name: Control Node | Print update related information of managed nodes
    debug: 
      var: update_count
  
  - name: Control Node | Copy Installed patches to a Installed_patches.log
    local_action:
      module: copy
      content: "{{update_count | to_json}}"
      dest: "{{ log_path }}/reports/installed_patches.log"
    become: yes
    become_user: root
    
  - name: Control Node | Print installed patches count of managed nodes
    debug:
      msg: "No. of patches installed on {{ inventory_hostname }} : {{ update_count.installed_update_count }}"
    ignore_errors: true

  - name: Control Node | Printing if there are no pending updates
    debug:
      msg: "The server {{ inventory_hostname }} is successfully patched and there are no pending updates."
    when: update_count.found_update_count == update_count.installed_update_count
    ignore_errors: true

  - name: Control Node | Printing if some updates are left to be installed
    debug:
      msg: "The server {{ inventory_hostname }} is not fully patched."
    when: update_count is undefined or update_count.found_update_count != update_count.installed_update_count
    ignore_errors: true

    
    # Post Patching main
  
  - name: Control Node | Update failed servers file
    local_action:
      module: lineinfile
      path: "{{ log_path }}/patching_status/failed.txt"
      insertafter: EOF
      line: "{{ inventory_hostname }}"
      create: yes
    when: update_count is undefined or update_count.found_update_count != update_count.installed_update_count
    ignore_errors: true
    become: yes
    
  - name: Control Node | Update patched servers file
    local_action:
      module: lineinfile
      path: "{{ log_path }}/patching_status/patched.txt"
      insertafter: EOF
      line: "{{ inventory_hostname }}"
      create: yes
    when: update_count.found_update_count == update_count.installed_update_count
    ignore_errors: true
    become: yes

  - name: Managed Node | Checking last reboot time
    win_shell: Get-CimInstance -ComputerName localhost -Class CIM_OperatingSystem -ErrorAction Stop | Select-Object CSName, LastBootUpTime
    register: lastbootuptime

  - name: Control Node | Printing last boot uptime of managed nodes
    debug:
      var: lastbootuptime.stdout_lines[3]
  
  - name: Managed Node | Generate hotfix information of last 24 hrs
    win_shell: |
      Get-HotFix | Select-Object Pscomputername,description,hotfixid,installedby,installedon | `
      Where-Object {$_.installedon -gt (get-date).Addhours(-24)} | Export-Csv -NoTypeInformation -Force C:\hotfix.csv

  - name: Managed Node | Collect hotfix information
    fetch:
      src: "{{ hotfix_source }}"
      dest: '{{ log_path }}/reports/{{ inventory_hostname }}_hotfix.csv'
      flat: yes
    become: yes

  - name: Control Node | Generating hotfix final report
    run_once: yes
    delegate_to: localhost
    shell: "cat reports/*_hotfix.csv >> results/final-hotfix.csv"
    args:
      chdir: "{{ log_path }}"
    become: yes
      
  - name: Control Node | Read final hotfix report's content
    run_once: yes
    delegate_to: localhost
    shell: "cat {{ log_path }}/results/final-hotfix.csv"
    register: finalhotfix
  
  - name: Control Node | Print final hotfix report's content
    debug: 
      var: finalhotfix.stdout_lines
    run_once: yes
    
  - name: Managed Node | Clean-up previous log files from windows client
    win_file:
      path: "{{ item }}"
      state: absent
    with_items:
      - '{{ logs_source }}'
      - '{{ hotfix_source }}'
      
  - name: Control Node | Create sorted allhosts and patched files
    shell: sort allhosts.txt > sorted_allhosts.txt;
          sort patched.txt > sorted_allpatched.txt;
    args:
      chdir: "{{ log_path }}/patching_status"
    delegate_to: localhost
    run_once: yes
    become: yes
    
  - name: Control Node | Create failed-unreachable file
    shell: comm -23 sorted_allhosts.txt sorted_allpatched.txt > failed_unreachable.txt;
          rm -rf sorted_allhosts.txt sorted_allpatched.txt
    args:
      chdir: "{{ log_path }}/patching_status"
    delegate_to: localhost
    run_once: yes
    become: yes
  
  - name: Control Node | Read allhosts file's content
    shell: cat allhosts.txt
    args:
      chdir: '{{ log_path }}/patching_status'
    delegate_to: localhost
    run_once: yes
    register: allhostsfile
  
  - name: Control Node | Print allhosts file's content
    debug: 
      var: allhostsfile.stdout_lines
    run_once: yes
    
  - name: Control Node | Read patched file's content
    shell: cat patched.txt
    args:
      chdir: '{{ log_path }}/patching_status'
    delegate_to: localhost
    run_once: yes
    register: patchedfile
  
  - name: Control Node | Print patched file's content
    debug: 
      var: patchedfile.stdout_lines
    run_once: yes
    
  - name: Control Node | Read failed_unreachable file's content
    shell: cat failed_unreachable.txt
    args:
      chdir: '{{ log_path }}/patching_status'
    delegate_to: localhost
    run_once: yes
    register: failed_unreachablefile
  
  - name: Control Node | Print failed_unreachable file's content
    debug: 
      var: failed_unreachablefile.stdout_lines
    run_once: yes