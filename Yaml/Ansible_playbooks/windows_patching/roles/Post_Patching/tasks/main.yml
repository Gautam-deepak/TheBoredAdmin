    # Post Patching main
  
  - name: Update failed servers file
    local_action:
      module: lineinfile
      path: "{{ log_path }}/patching_status/failed.txt"
      insertafter: EOF
      line: "{{ inventory_hostname }}"
      create: yes
    when: pending_updates.stdout_lines != []
    ignore_errors: true
    
  - name: Update patched servers file
    local_action:
      module: lineinfile
      path: "{{ log_path }}/patching_status/patched.txt"
      insertafter: EOF
      line: "{{ inventory_hostname }}"
      create: yes
    when: pending_updates.stdout_lines == []
    ignore_errors: true

  - name: Checking last reboot time
    win_shell: Get-CimInstance -ComputerName localhost -Class CIM_OperatingSystem -ErrorAction Stop | Select-Object CSName, LastBootUpTime
    register: lastbootuptime

  - name: Printing last boot uptime
    debug:
      var: lastbootuptime.stdout_lines[3]
  
  - name: Generate hotfix information on windows
    win_shell: |
      Get-HotFix | Select-Object Pscomputername,description,hotfixid,installedby,installedon | `
      Where-Object {$_.installedon -gt (get-date).Addhours(-50)} | Export-Csv -NoTypeInformation -Force C:\hotfix.csv

  - name: Collect hotfix information from windows
    fetch:
      src: "{{ hotfix_source }}"
      dest: '{{ log_path }}/reports/{{ inventory_hostname }}_hotfix.csv'
      flat: yes

  - name: Generating hotfix final report locally
    run_once: yes
    delegate_to: localhost
    shell: "cat reports/*_hotfix.csv >> results/final-hotfix.csv"
    args:
      chdir: "{{ log_path }}"
      
  - name: Read final hotfix report
    run_once: yes
    delegate_to: localhost
    shell: "cat {{ log_path }}/results/final-hotfix.csv"
    register: finalhotfix
  
  - name: Print final hotfix report
    debug: 
      var: finalhotfix.stdout_lines
    run_once: yes
    
  - name: Clean-up previous log files from windows client
    win_file:
      path: "{{ item }}"
      state: absent
    with_items:
      - '{{ logs_source }}'
      - '{{ hotfix_source }}'
      
  - name: Create sorted file allhosts and patched on ansible server
    shell: sort allhosts.txt > sorted_allhosts.txt;
          sort patched.txt > sorted_allpatched.txt;
    args:
      chdir: "{{ log_path }}/patching_status"
    delegate_to: localhost
    run_once: yes
    
  - name: Create failed-unreachable file on ansible server
    shell: comm -23 sorted_allhosts.txt sorted_allpatched.txt > failed_unreachable.txt;
          rm -rf sorted_allhosts.txt sorted_allpatched.txt
    args:
      chdir: "{{ log_path }}/patching_status"
    delegate_to: localhost
    run_once: yes
  
  - name: Read allhosts file content
    shell: cat allhosts.txt
    args:
      chdir: '{{ log_path }}/patching_status'
    delegate_to: localhost
    run_once: yes
    register: allhostsfile
  
  - name: Print allhosts file content
    debug: 
      var: allhostsfile.stdout_lines
    run_once: yes
    
  - name: Read patched file content
    shell: cat patched.txt
    args:
      chdir: '{{ log_path }}/patching_status'
    delegate_to: localhost
    run_once: yes
    register: patchedfile
  
  - name: Print patched file content
    debug: 
      var: patchedfile.stdout_lines
    run_once: yes
    
  - name: Read failed_unreachable file content
    shell: cat failed_unreachable.txt
    args:
      chdir: '{{ log_path }}/patching_status'
    delegate_to: localhost
    run_once: yes
    register: failed_unreachablefile
  
  - name: Print failed_unreachable file content
    debug: 
      var: failed_unreachablefile.stdout_lines
    run_once: yes